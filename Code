const n = 30;
const m = 60;
let matrix = [];

function MatrixGeneration(n, m)
{
  for (let i = 0; i < n; i++)
  {
    let row = [];

    for (let j = 0; j < m; j++)
    {
      row[j] = Math.floor(Math.random() + 0.5);
    }

    matrix[i] = row;
  }
}

function MatrixPrint(matrix)
{
  for (let i = 0; i < n; i++)
  {
    for (let j = 0; j < m; j++)
    {
      process.stdout.write(matrix[i][j] ? '#' : ' ');
    }

    console.log();
  }
}

function IsAlive(matrix, i, j)
{
  let dx = [-1, -1, -1, 0, 0, 1, 1, 1];
  let dy = [-1, 0, 1, -1, 1, -1, 0, 1];
  let count = 0;
  for (let k = 0; k < 8; k++)
  {
      count += Get(matrix, i + dx[k], j + dy[k]);
  }

  if (matrix[i][j] == 1)
  {
    return count >= 2 && count <= 3;
  }

  return count == 3;
}


function Get(matrix, i, j)
{
  if (i < 0 || j < 0 || i >= n || j >= m)
  {
    return 0;
  }

  return matrix[i][j];
}

function Go(n, m, matrix)
{
    while (true)
    {
      let buffMatrix = [];

      for (let i = 0; i < n; i++)
      {
        let buffRow = [];

        for (let j = 0; j < m; j++)
        {
          buffRow[j] = 0;
        }

        buffMatrix[i] = buffRow;
      }

      for (let i = 0; i < n; i++)
      {
        for (let j = 0; j < m; j++)
        {
          if (IsAlive(matrix, i, j))
          {
            buffMatrix[i][j] = 1;
          }
          else
          {
            buffMatrix[i][j] = 0;
          }
        }
      }

      matrix = buffMatrix;
      MatrixPrint(matrix);
      for (let i = 0; i < 100000000; i++); // delay
      console.clear();
    }
}

MatrixGeneration(n, m);
Go(n, m, matrix);
